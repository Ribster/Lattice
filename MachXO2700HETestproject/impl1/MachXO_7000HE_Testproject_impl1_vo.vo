
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.7.1.502

// ldbanno -n Verilog -o MachXO_7000HE_Testproject_impl1_vo.vo -w -neg -gui -msgset Z:/GITHUB/Lattice/MachXO2700HETestproject/promote.xml MachXO_7000HE_Testproject_impl1.ncd 
// Netlist created on Wed May 18 19:01:14 2016
// Netlist written on Wed May 18 19:01:27 2016
// Design is for device LCMXO2-7000HE
// Design is for package TQFP144
// Design is for performance grade 5

`timescale 1 ns / 1 ps

module lcd_sender ( clk, rst, lcd_bus, lcd_write, lcd_rs, go, data1Command0, 
                    busy, payload );
  input  clk, rst, go, data1Command0;
  input  [15:0] payload;
  output [15:0] lcd_bus;
  output lcd_write, lcd_rs, busy;
  wire   PS_vivaz_state_1, n324, PS_vivaz_state_0, PS_vivaz_state_2, n300, 
         PS_vivaz_state_2_N_17_0, clk_c, n304, clk_c_enable_19, n323, 
         clk_c_enable_1, busy_c, payload_c_1, payload_c_2, lcd_bus_c_2, 
         lcd_bus_c_1, payload_c_3, payload_c_4, lcd_bus_c_4, lcd_bus_c_3, 
         payload_c_5, payload_c_6, lcd_bus_c_6, lcd_bus_c_5, payload_c_7, 
         payload_c_8, lcd_bus_c_8, lcd_bus_c_7, data1Command0_c, 
         clk_c_enable_2, lcd_rs_c, lcd_write_N_23, clk_c_enable_18, 
         lcd_write_c, go_c, rst_c, payload_c_9, payload_c_0, lcd_bus_c_0, 
         lcd_bus_c_9, payload_c_11, payload_c_10, lcd_bus_c_10, lcd_bus_c_11, 
         payload_c_12, payload_c_13, lcd_bus_c_13, lcd_bus_c_12, payload_c_14, 
         payload_c_15, lcd_bus_c_15, lcd_bus_c_14, VCCI;

  SLICE_0 SLICE_0( .D1(PS_vivaz_state_1), .C1(n324), .B1(PS_vivaz_state_0), 
    .A1(PS_vivaz_state_2), .D0(PS_vivaz_state_1), .C0(n324), 
    .B0(PS_vivaz_state_2), .A0(PS_vivaz_state_0), .DI1(n300), 
    .DI0(PS_vivaz_state_2_N_17_0), .CLK(clk_c), .F0(PS_vivaz_state_2_N_17_0), 
    .Q0(PS_vivaz_state_0), .F1(n300), .Q1(PS_vivaz_state_1));
  SLICE_1 SLICE_1( .D1(PS_vivaz_state_1), .C1(PS_vivaz_state_0), 
    .B1(PS_vivaz_state_2), .D0(PS_vivaz_state_1), .C0(PS_vivaz_state_0), 
    .A0(PS_vivaz_state_2), .DI0(n304), .CLK(clk_c), .F0(n304), 
    .Q0(PS_vivaz_state_2), .F1(clk_c_enable_19));
  SLICE_2 SLICE_2( .B0(PS_vivaz_state_2), .DI0(n323), .CE(clk_c_enable_1), 
    .CLK(clk_c), .F0(n323), .Q0(busy_c));
  SLICE_4 SLICE_4( .M1(payload_c_1), .M0(payload_c_2), .CE(clk_c_enable_19), 
    .CLK(clk_c), .Q0(lcd_bus_c_2), .Q1(lcd_bus_c_1));
  SLICE_5 SLICE_5( .M1(payload_c_3), .M0(payload_c_4), .CE(clk_c_enable_19), 
    .CLK(clk_c), .Q0(lcd_bus_c_4), .Q1(lcd_bus_c_3));
  SLICE_6 SLICE_6( .M1(payload_c_5), .M0(payload_c_6), .CE(clk_c_enable_19), 
    .CLK(clk_c), .Q0(lcd_bus_c_6), .Q1(lcd_bus_c_5));
  SLICE_7 SLICE_7( .M1(payload_c_7), .M0(payload_c_8), .CE(clk_c_enable_19), 
    .CLK(clk_c), .Q0(lcd_bus_c_8), .Q1(lcd_bus_c_7));
  SLICE_11 SLICE_11( .M0(data1Command0_c), .CE(clk_c_enable_2), .CLK(clk_c), 
    .Q0(lcd_rs_c));
  SLICE_12 SLICE_12( .D0(PS_vivaz_state_2), .A0(PS_vivaz_state_1), 
    .DI0(lcd_write_N_23), .CE(clk_c_enable_18), .CLK(clk_c), 
    .F0(lcd_write_N_23), .Q0(lcd_write_c));
  SLICE_13 SLICE_13( .D1(busy_c), .C1(go_c), .A1(rst_c), .D0(PS_vivaz_state_2), 
    .C0(n324), .B0(PS_vivaz_state_0), .A0(PS_vivaz_state_1), .M1(payload_c_9), 
    .M0(payload_c_0), .CE(clk_c_enable_19), .CLK(clk_c), .F0(clk_c_enable_18), 
    .Q0(lcd_bus_c_0), .F1(n324), .Q1(lcd_bus_c_9));
  SLICE_14 SLICE_14( .D1(n324), .C1(PS_vivaz_state_1), .B1(PS_vivaz_state_2), 
    .A1(PS_vivaz_state_0), .D0(n324), .C0(PS_vivaz_state_0), 
    .B0(PS_vivaz_state_2), .A0(PS_vivaz_state_1), .M1(payload_c_11), 
    .M0(payload_c_10), .CE(clk_c_enable_19), .CLK(clk_c), .F0(clk_c_enable_2), 
    .Q0(lcd_bus_c_10), .F1(clk_c_enable_1), .Q1(lcd_bus_c_11));
  SLICE_21 SLICE_21( .M1(payload_c_12), .M0(payload_c_13), 
    .CE(clk_c_enable_19), .CLK(clk_c), .Q0(lcd_bus_c_13), .Q1(lcd_bus_c_12));
  SLICE_22 SLICE_22( .M1(payload_c_14), .M0(payload_c_15), 
    .CE(clk_c_enable_19), .CLK(clk_c), .Q0(lcd_bus_c_15), .Q1(lcd_bus_c_14));
  lcd_bus_15_ \lcd_bus[15]_I ( .PADDO(lcd_bus_c_15), .lcdbus15(lcd_bus[15]));
  lcd_bus_11_ \lcd_bus[11]_I ( .PADDO(lcd_bus_c_11), .lcdbus11(lcd_bus[11]));
  lcd_bus_12_ \lcd_bus[12]_I ( .PADDO(lcd_bus_c_12), .lcdbus12(lcd_bus[12]));
  lcd_bus_13_ \lcd_bus[13]_I ( .PADDO(lcd_bus_c_13), .lcdbus13(lcd_bus[13]));
  lcd_bus_14_ \lcd_bus[14]_I ( .PADDO(lcd_bus_c_14), .lcdbus14(lcd_bus[14]));
  lcd_bus_10_ \lcd_bus[10]_I ( .PADDO(lcd_bus_c_10), .lcdbus10(lcd_bus[10]));
  lcd_bus_9_ \lcd_bus[9]_I ( .PADDO(lcd_bus_c_9), .lcdbus9(lcd_bus[9]));
  lcd_bus_8_ \lcd_bus[8]_I ( .PADDO(lcd_bus_c_8), .lcdbus8(lcd_bus[8]));
  lcd_bus_7_ \lcd_bus[7]_I ( .PADDO(lcd_bus_c_7), .lcdbus7(lcd_bus[7]));
  lcd_bus_6_ \lcd_bus[6]_I ( .PADDO(lcd_bus_c_6), .lcdbus6(lcd_bus[6]));
  lcd_bus_5_ \lcd_bus[5]_I ( .PADDO(lcd_bus_c_5), .lcdbus5(lcd_bus[5]));
  lcd_bus_4_ \lcd_bus[4]_I ( .PADDO(lcd_bus_c_4), .lcdbus4(lcd_bus[4]));
  lcd_bus_3_ \lcd_bus[3]_I ( .PADDO(lcd_bus_c_3), .lcdbus3(lcd_bus[3]));
  lcd_bus_2_ \lcd_bus[2]_I ( .PADDO(lcd_bus_c_2), .lcdbus2(lcd_bus[2]));
  lcd_bus_1_ \lcd_bus[1]_I ( .PADDO(lcd_bus_c_1), .lcdbus1(lcd_bus[1]));
  lcd_bus_0_ \lcd_bus[0]_I ( .PADDO(lcd_bus_c_0), .lcdbus0(lcd_bus[0]));
  lcd_write lcd_write_I( .PADDO(lcd_write_c), .lcd_write(lcd_write));
  lcd_rs lcd_rs_I( .PADDO(lcd_rs_c), .lcd_rs(lcd_rs));
  busy busy_I( .PADDO(busy_c), .busy(busy));
  clk clk_I( .PADDI(clk_c), .clk(clk));
  rst rst_I( .PADDI(rst_c), .rst(rst));
  go go_I( .PADDI(go_c), .go(go));
  data1Command0 data1Command0_I( .PADDI(data1Command0_c), 
    .data1Command0(data1Command0));
  payload_15_ \payload[15]_I ( .PADDI(payload_c_15), .payload15(payload[15]));
  payload_14_ \payload[14]_I ( .PADDI(payload_c_14), .payload14(payload[14]));
  payload_13_ \payload[13]_I ( .PADDI(payload_c_13), .payload13(payload[13]));
  payload_12_ \payload[12]_I ( .PADDI(payload_c_12), .payload12(payload[12]));
  payload_11_ \payload[11]_I ( .PADDI(payload_c_11), .payload11(payload[11]));
  payload_10_ \payload[10]_I ( .PADDI(payload_c_10), .payload10(payload[10]));
  payload_9_ \payload[9]_I ( .PADDI(payload_c_9), .payload9(payload[9]));
  payload_8_ \payload[8]_I ( .PADDI(payload_c_8), .payload8(payload[8]));
  payload_7_ \payload[7]_I ( .PADDI(payload_c_7), .payload7(payload[7]));
  payload_6_ \payload[6]_I ( .PADDI(payload_c_6), .payload6(payload[6]));
  payload_5_ \payload[5]_I ( .PADDI(payload_c_5), .payload5(payload[5]));
  payload_4_ \payload[4]_I ( .PADDI(payload_c_4), .payload4(payload[4]));
  payload_3_ \payload[3]_I ( .PADDI(payload_c_3), .payload3(payload[3]));
  payload_2_ \payload[2]_I ( .PADDI(payload_c_2), .payload2(payload[2]));
  payload_1_ \payload[1]_I ( .PADDI(payload_c_1), .payload1(payload[1]));
  payload_0_ \payload[0]_I ( .PADDI(payload_c_0), .payload0(payload[0]));
  GSR_INST GSR_INST( .GSRNET(~rst_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module SLICE_0 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut4 i19_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40001 PS_vivaz_state_2__I_0_33_Mux_0_i7_4_lut( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre PS_vivaz_state_i1( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0002 PS_vivaz_state_i0( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h33C8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40001 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDD46) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module vmuxregsre0002 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_1 ( input D1, C1, B1, D0, C0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40003 i271_3_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 i19_2_lut_3_lut( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre PS_vivaz_state_i2( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40003 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40004 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_2 ( input B0, DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40005 i94_1_lut_rep_5( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre busy_28( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40005 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3333) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_4 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre lcd_bus_i2( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre lcd_bus_i3( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_5 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre lcd_bus_i4( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre lcd_bus_i5( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_6 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre lcd_bus_i6( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre lcd_bus_i7( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_7 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre lcd_bus_i8( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre lcd_bus_i9( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_11 ( input M0, CE, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre lcd_rs_29( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_12 ( input D0, A0, DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40006 i213_2_lut_2_lut( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre lcd_write_27( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_13 ( input D1, C1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40007 i1_3_lut_rep_6( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40008 i1_4_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre lcd_bus_i10( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre lcd_bus_i1( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40007 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40008 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88C8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_14 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40009 i1_4_lut_4_lut_adj_1( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40010 i2_3_lut_4_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre lcd_bus_i12( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre lcd_bus_i11( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40009 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8280) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40010 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_21 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre lcd_bus_i13( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre lcd_bus_i14( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_22 ( input M1, M0, CE, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre lcd_bus_i15( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre lcd_bus_i16( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lcd_bus_15_ ( input PADDO, output lcdbus15 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_15( .I(PADDO), .T(GNDI), .PAD(lcdbus15));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus15) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module lcd_bus_11_ ( input PADDO, output lcdbus11 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_11( .I(PADDO), .T(GNDI), .PAD(lcdbus11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus11) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_12_ ( input PADDO, output lcdbus12 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_12( .I(PADDO), .T(GNDI), .PAD(lcdbus12));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus12) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_13_ ( input PADDO, output lcdbus13 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_13( .I(PADDO), .T(GNDI), .PAD(lcdbus13));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus13) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_14_ ( input PADDO, output lcdbus14 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_14( .I(PADDO), .T(GNDI), .PAD(lcdbus14));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus14) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_10_ ( input PADDO, output lcdbus10 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_10( .I(PADDO), .T(GNDI), .PAD(lcdbus10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus10) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_9_ ( input PADDO, output lcdbus9 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_9( .I(PADDO), .T(GNDI), .PAD(lcdbus9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus9) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_8_ ( input PADDO, output lcdbus8 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_8( .I(PADDO), .T(GNDI), .PAD(lcdbus8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus8) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_7_ ( input PADDO, output lcdbus7 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_7( .I(PADDO), .T(GNDI), .PAD(lcdbus7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus7) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_6_ ( input PADDO, output lcdbus6 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_6( .I(PADDO), .T(GNDI), .PAD(lcdbus6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus6) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_5_ ( input PADDO, output lcdbus5 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_5( .I(PADDO), .T(GNDI), .PAD(lcdbus5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus5) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_4_ ( input PADDO, output lcdbus4 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_4( .I(PADDO), .T(GNDI), .PAD(lcdbus4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus4) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_3_ ( input PADDO, output lcdbus3 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_3( .I(PADDO), .T(GNDI), .PAD(lcdbus3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus3) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_2_ ( input PADDO, output lcdbus2 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_2( .I(PADDO), .T(GNDI), .PAD(lcdbus2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus2) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_1_ ( input PADDO, output lcdbus1 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_1( .I(PADDO), .T(GNDI), .PAD(lcdbus1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_bus_0_ ( input PADDO, output lcdbus0 );
  wire   GNDI;

  xo2iobuf lcd_bus_pad_0( .I(PADDO), .T(GNDI), .PAD(lcdbus0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcdbus0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_write ( input PADDO, output lcd_write );
  wire   GNDI;

  xo2iobuf lcd_write_pad( .I(PADDO), .T(GNDI), .PAD(lcd_write));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcd_write) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_rs ( input PADDO, output lcd_rs );
  wire   GNDI;

  xo2iobuf lcd_rs_pad( .I(PADDO), .T(GNDI), .PAD(lcd_rs));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lcd_rs) = (0:0:0,0:0:0);
  endspecify

endmodule

module busy ( input PADDO, output busy );
  wire   GNDI;

  xo2iobuf busy_pad( .I(PADDO), .T(GNDI), .PAD(busy));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => busy) = (0:0:0,0:0:0);
  endspecify

endmodule

module clk ( output PADDI, input clk );

  xo2iobuf0011 clk_pad( .Z(PADDI), .PAD(clk));

  specify
    (clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk, 0:0:0);
    $width (negedge clk, 0:0:0);
  endspecify

endmodule

module xo2iobuf0011 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module rst ( output PADDI, input rst );

  xo2iobuf0011 rst_pad( .Z(PADDI), .PAD(rst));

  specify
    (rst => PADDI) = (0:0:0,0:0:0);
    $width (posedge rst, 0:0:0);
    $width (negedge rst, 0:0:0);
  endspecify

endmodule

module go ( output PADDI, input go );

  xo2iobuf0011 go_pad( .Z(PADDI), .PAD(go));

  specify
    (go => PADDI) = (0:0:0,0:0:0);
    $width (posedge go, 0:0:0);
    $width (negedge go, 0:0:0);
  endspecify

endmodule

module data1Command0 ( output PADDI, input data1Command0 );

  xo2iobuf0011 data1Command0_pad( .Z(PADDI), .PAD(data1Command0));

  specify
    (data1Command0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge data1Command0, 0:0:0);
    $width (negedge data1Command0, 0:0:0);
  endspecify

endmodule

module payload_15_ ( output PADDI, input payload15 );

  xo2iobuf0011 payload_pad_15( .Z(PADDI), .PAD(payload15));

  specify
    (payload15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload15, 0:0:0);
    $width (negedge payload15, 0:0:0);
  endspecify

endmodule

module payload_14_ ( output PADDI, input payload14 );

  xo2iobuf0011 payload_pad_14( .Z(PADDI), .PAD(payload14));

  specify
    (payload14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload14, 0:0:0);
    $width (negedge payload14, 0:0:0);
  endspecify

endmodule

module payload_13_ ( output PADDI, input payload13 );

  xo2iobuf0011 payload_pad_13( .Z(PADDI), .PAD(payload13));

  specify
    (payload13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload13, 0:0:0);
    $width (negedge payload13, 0:0:0);
  endspecify

endmodule

module payload_12_ ( output PADDI, input payload12 );

  xo2iobuf0011 payload_pad_12( .Z(PADDI), .PAD(payload12));

  specify
    (payload12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload12, 0:0:0);
    $width (negedge payload12, 0:0:0);
  endspecify

endmodule

module payload_11_ ( output PADDI, input payload11 );

  xo2iobuf0011 payload_pad_11( .Z(PADDI), .PAD(payload11));

  specify
    (payload11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload11, 0:0:0);
    $width (negedge payload11, 0:0:0);
  endspecify

endmodule

module payload_10_ ( output PADDI, input payload10 );

  xo2iobuf0011 payload_pad_10( .Z(PADDI), .PAD(payload10));

  specify
    (payload10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload10, 0:0:0);
    $width (negedge payload10, 0:0:0);
  endspecify

endmodule

module payload_9_ ( output PADDI, input payload9 );

  xo2iobuf0011 payload_pad_9( .Z(PADDI), .PAD(payload9));

  specify
    (payload9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload9, 0:0:0);
    $width (negedge payload9, 0:0:0);
  endspecify

endmodule

module payload_8_ ( output PADDI, input payload8 );

  xo2iobuf0011 payload_pad_8( .Z(PADDI), .PAD(payload8));

  specify
    (payload8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload8, 0:0:0);
    $width (negedge payload8, 0:0:0);
  endspecify

endmodule

module payload_7_ ( output PADDI, input payload7 );

  xo2iobuf0011 payload_pad_7( .Z(PADDI), .PAD(payload7));

  specify
    (payload7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload7, 0:0:0);
    $width (negedge payload7, 0:0:0);
  endspecify

endmodule

module payload_6_ ( output PADDI, input payload6 );

  xo2iobuf0011 payload_pad_6( .Z(PADDI), .PAD(payload6));

  specify
    (payload6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload6, 0:0:0);
    $width (negedge payload6, 0:0:0);
  endspecify

endmodule

module payload_5_ ( output PADDI, input payload5 );

  xo2iobuf0011 payload_pad_5( .Z(PADDI), .PAD(payload5));

  specify
    (payload5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload5, 0:0:0);
    $width (negedge payload5, 0:0:0);
  endspecify

endmodule

module payload_4_ ( output PADDI, input payload4 );

  xo2iobuf0011 payload_pad_4( .Z(PADDI), .PAD(payload4));

  specify
    (payload4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload4, 0:0:0);
    $width (negedge payload4, 0:0:0);
  endspecify

endmodule

module payload_3_ ( output PADDI, input payload3 );

  xo2iobuf0011 payload_pad_3( .Z(PADDI), .PAD(payload3));

  specify
    (payload3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload3, 0:0:0);
    $width (negedge payload3, 0:0:0);
  endspecify

endmodule

module payload_2_ ( output PADDI, input payload2 );

  xo2iobuf0011 payload_pad_2( .Z(PADDI), .PAD(payload2));

  specify
    (payload2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload2, 0:0:0);
    $width (negedge payload2, 0:0:0);
  endspecify

endmodule

module payload_1_ ( output PADDI, input payload1 );

  xo2iobuf0011 payload_pad_1( .Z(PADDI), .PAD(payload1));

  specify
    (payload1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload1, 0:0:0);
    $width (negedge payload1, 0:0:0);
  endspecify

endmodule

module payload_0_ ( output PADDI, input payload0 );

  xo2iobuf0011 payload_pad_0( .Z(PADDI), .PAD(payload0));

  specify
    (payload0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge payload0, 0:0:0);
    $width (negedge payload0, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  INV INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
