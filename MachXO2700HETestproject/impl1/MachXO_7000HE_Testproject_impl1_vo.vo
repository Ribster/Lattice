
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.7.1.502

// ldbanno -n Verilog -o MachXO_7000HE_Testproject_impl1_vo.vo -w -neg -gui -msgset Z:/GITHUB/Lattice/MachXO2700HETestproject/promote.xml MachXO_7000HE_Testproject_impl1.ncd 
// Netlist created on Thu May 19 22:55:59 2016
// Netlist written on Thu May 19 22:56:19 2016
// Design is for device LCMXO2-7000HE
// Design is for package TQFP144
// Design is for performance grade 5

`timescale 1 ns / 1 ps

module lcd_FSM ( clk, rst, datacommand, data, debug, lcd_data, lcd_wr, lcd_rs );
  input  clk, rst, datacommand;
  input  [15:0] data;
  output debug;
  output [15:0] lcd_data;
  output lcd_wr, lcd_rs;
  wire   n175, clk_c_enable_1, n141, clk_c, debug_c, n113, n112, n133, GND_net, 
         n117, n116, rst_c, n115, n114, VCCI;

  SLICE_0 SLICE_0( .DI0(n175), .CE(clk_c_enable_1), .LSR(n141), .CLK(clk_c), 
    .F0(n175), .Q0(debug_c));
  SLICE_1 SLICE_1( .M0(n113), .CLK(clk_c), .Q0(n112));
  SLICE_4 SLICE_4( .M1(n133), .M0(n112), .CLK(clk_c), .F0(GND_net), .Q0(n133), 
    .Q1(n117));
  SLICE_5 SLICE_5( .D1(n116), .B1(rst_c), .D0(n133), .B0(rst_c), .M1(n116), 
    .M0(n117), .CLK(clk_c), .F0(n141), .Q0(n116), .F1(clk_c_enable_1), 
    .Q1(n115));
  SLICE_6 SLICE_6( .M1(n115), .M0(n114), .CLK(clk_c), .Q0(n113), .Q1(n114));
  lcd_data_13_ \lcd_data[13]_I ( .PADDO(GND_net), .lcddata13(lcd_data[13]));
  lcd_data_1_ \lcd_data[1]_I ( .PADDO(GND_net), .lcddata1(lcd_data[1]));
  lcd_data_5_ \lcd_data[5]_I ( .PADDO(GND_net), .lcddata5(lcd_data[5]));
  lcd_data_15_ \lcd_data[15]_I ( .PADDO(GND_net), .lcddata15(lcd_data[15]));
  lcd_data_14_ \lcd_data[14]_I ( .PADDO(GND_net), .lcddata14(lcd_data[14]));
  debug debug_I( .PADDO(debug_c), .debug(debug));
  lcd_data_8_ \lcd_data[8]_I ( .PADDO(GND_net), .lcddata8(lcd_data[8]));
  lcd_data_9_ \lcd_data[9]_I ( .PADDO(GND_net), .lcddata9(lcd_data[9]));
  lcd_data_10_ \lcd_data[10]_I ( .PADDO(GND_net), .lcddata10(lcd_data[10]));
  lcd_data_11_ \lcd_data[11]_I ( .PADDO(GND_net), .lcddata11(lcd_data[11]));
  lcd_data_2_ \lcd_data[2]_I ( .PADDO(GND_net), .lcddata2(lcd_data[2]));
  lcd_data_3_ \lcd_data[3]_I ( .PADDO(GND_net), .lcddata3(lcd_data[3]));
  lcd_data_4_ \lcd_data[4]_I ( .PADDO(GND_net), .lcddata4(lcd_data[4]));
  lcd_data_6_ \lcd_data[6]_I ( .PADDO(GND_net), .lcddata6(lcd_data[6]));
  lcd_data_7_ \lcd_data[7]_I ( .PADDO(GND_net), .lcddata7(lcd_data[7]));
  lcd_data_12_ \lcd_data[12]_I ( .PADDO(GND_net), .lcddata12(lcd_data[12]));
  lcd_data_0_ \lcd_data[0]_I ( .PADDO(GND_net), .lcddata0(lcd_data[0]));
  lcd_wr lcd_wr_I( .PADDO(GND_net), .lcd_wr(lcd_wr));
  lcd_rs lcd_rs_I( .PADDO(GND_net), .lcd_rs(lcd_rs));
  clk clk_I( .PADDI(clk_c), .clk(clk));
  rst rst_I( .PADDI(rst_c), .rst(rst));
  GSR_INST GSR_INST( .GSRNET(~rst_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module SLICE_0 ( input DI0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut4 m1_lut( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre debug_18( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module SLICE_1 ( input M0, CLK, output Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  vmuxregsre0001 PS_FSM_FSM_i6( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0001 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_4 ( input M1, M0, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40002 i1( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 PS_FSM_FSM_i1( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 PS_FSM_FSM_i7( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40002 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0003 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_5 ( input D1, B1, D0, B0, M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40004 i92_2_lut_2_lut( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 i70_2_lut_2_lut( .A(GNDI), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0001 PS_FSM_FSM_i3( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 PS_FSM_FSM_i2( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40004 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_6 ( input M1, M0, CLK, output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0001 PS_FSM_FSM_i4( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 PS_FSM_FSM_i5( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lcd_data_13_ ( input PADDO, output lcddata13 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_13( .I(PADDO), .T(VCCI), .PAD(lcddata13));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata13) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output PAD );

  OBZ INST5( .I(I), .T(T), .O(PAD));
endmodule

module lcd_data_1_ ( input PADDO, output lcddata1 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_1( .I(PADDO), .T(VCCI), .PAD(lcddata1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_5_ ( input PADDO, output lcddata5 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_5( .I(PADDO), .T(VCCI), .PAD(lcddata5));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata5) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_15_ ( input PADDO, output lcddata15 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_15( .I(PADDO), .T(VCCI), .PAD(lcddata15));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata15) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_14_ ( input PADDO, output lcddata14 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_14( .I(PADDO), .T(VCCI), .PAD(lcddata14));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata14) = (0:0:0,0:0:0);
  endspecify

endmodule

module debug ( input PADDO, output debug );
  wire   GNDI;

  xo2iobuf0005 debug_pad( .I(PADDO), .T(GNDI), .PAD(debug));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => debug) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0005 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module lcd_data_8_ ( input PADDO, output lcddata8 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_8( .I(PADDO), .T(VCCI), .PAD(lcddata8));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata8) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_9_ ( input PADDO, output lcddata9 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_9( .I(PADDO), .T(VCCI), .PAD(lcddata9));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata9) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_10_ ( input PADDO, output lcddata10 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_10( .I(PADDO), .T(VCCI), .PAD(lcddata10));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata10) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_11_ ( input PADDO, output lcddata11 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_11( .I(PADDO), .T(VCCI), .PAD(lcddata11));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata11) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_2_ ( input PADDO, output lcddata2 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_2( .I(PADDO), .T(VCCI), .PAD(lcddata2));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata2) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_3_ ( input PADDO, output lcddata3 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_3( .I(PADDO), .T(VCCI), .PAD(lcddata3));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata3) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_4_ ( input PADDO, output lcddata4 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_4( .I(PADDO), .T(VCCI), .PAD(lcddata4));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata4) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_6_ ( input PADDO, output lcddata6 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_6( .I(PADDO), .T(VCCI), .PAD(lcddata6));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata6) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_7_ ( input PADDO, output lcddata7 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_7( .I(PADDO), .T(VCCI), .PAD(lcddata7));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata7) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_12_ ( input PADDO, output lcddata12 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_12( .I(PADDO), .T(VCCI), .PAD(lcddata12));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata12) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_data_0_ ( input PADDO, output lcddata0 );
  wire   VCCI;

  xo2iobuf lcd_data_pad_0( .I(PADDO), .T(VCCI), .PAD(lcddata0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcddata0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_wr ( input PADDO, output lcd_wr );
  wire   VCCI;

  xo2iobuf lcd_wr_pad( .I(PADDO), .T(VCCI), .PAD(lcd_wr));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcd_wr) = (0:0:0,0:0:0);
  endspecify

endmodule

module lcd_rs ( input PADDO, output lcd_rs );
  wire   VCCI;

  xo2iobuf lcd_rs_pad( .I(PADDO), .T(VCCI), .PAD(lcd_rs));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => lcd_rs) = (0:0:0,0:0:0);
  endspecify

endmodule

module clk ( output PADDI, input clk );

  xo2iobuf0006 clk_pad( .Z(PADDI), .PAD(clk));

  specify
    (clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk, 0:0:0);
    $width (negedge clk, 0:0:0);
  endspecify

endmodule

module xo2iobuf0006 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module rst ( output PADDI, input rst );

  xo2iobuf0006 rst_pad( .Z(PADDI), .PAD(rst));

  specify
    (rst => PADDI) = (0:0:0,0:0:0);
    $width (posedge rst, 0:0:0);
    $width (negedge rst, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  INV INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
